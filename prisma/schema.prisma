generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "public")]
}

model companies {
  id                    String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                  String             @unique(map: "Unique Company Name") @db.VarChar(80)
  website               String?            @db.VarChar(255)
  primary_contact_email String             @db.VarChar(255)
  primary_contact_phone String?            @db.VarChar(20)
  created_at            DateTime           @default(now()) @db.Timestamptz(6)
  updated_at            DateTime           @default(now()) @db.Timestamptz(6)
  company_status        company_status
  tunnels               tunnels[]
  user_invitations      user_invitations[]
  users                 users[]
}

model user_invitations {
  id                                                String            @id(map: "userInvitations_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  company_id                                        String            @db.Uuid
  email                                             String            @db.VarChar(80)
  role                                              user_role
  invitation_token                                  String            @db.Uuid
  expires_at                                        DateTime          @db.Timestamptz(6)
  created_at                                        DateTime          @default(now()) @db.Timestamptz(6)
  updated_at                                        DateTime          @default(now()) @db.Timestamptz(6)
  status                                            invitation_status @default(PENDING)
  created_by_user_id                                String            @db.Uuid
  accepted_by_user_id                               String?           @db.Uuid
  first_name                                        String            @db.VarChar(80)
  last_name                                         String            @db.VarChar(80)
  companies                                         companies         @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userInvitations_company_id_fkey")
  users_user_invitations_accepted_by_user_idTousers users?            @relation("user_invitations_accepted_by_user_idTousers", fields: [accepted_by_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_user_invitations_created_by_user_idTousers  users             @relation("user_invitations_created_by_user_idTousers", fields: [created_by_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                                                           String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  company_id                                                   String             @db.Uuid
  email                                                        String             @db.VarChar(255)
  hashed_password                                              String             @db.VarChar(255)
  first_name                                                   String             @db.VarChar(255)
  last_name                                                    String             @db.VarChar(255)
  role                                                         user_role
  is_active                                                    Boolean
  email_verified                                               Boolean
  last_login                                                   DateTime           @default(now()) @db.Timestamptz(6)
  failed_login_attempts                                        Int                @default(0)
  password_reset_token                                         String             @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  password_reset_expires                                       DateTime?          @default(now()) @db.Timestamptz(6)
  created_at                                                   DateTime           @default(now()) @db.Timestamptz(6)
  updated_at                                                   DateTime           @default(now()) @db.Timestamptz(6)
  user_invitations_user_invitations_accepted_by_user_idTousers user_invitations[] @relation("user_invitations_accepted_by_user_idTousers")
  user_invitations_user_invitations_created_by_user_idTousers  user_invitations[] @relation("user_invitations_created_by_user_idTousers")
  companies                                                    companies          @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_company")
}

model tunnels {
  id                 String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name               String    @db.VarChar(100)
  company_id         String    @db.Uuid
  source_type        String    @db.VarChar(50)
  source_config      Json      @db.Json
  destination_type   String    @db.VarChar(50)
  destination_config Json      @db.Json
  field_mappings     Json      @db.Json
  status             String    @db.VarChar(20)
  last_error         String?
  created_at         DateTime  @default(now()) @db.Timestamptz(6)
  updated_at         DateTime  @default(now()) @db.Timestamptz(6)
  companies          companies @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "company_id FK")
}

enum invitation_status {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum user_role {
  ADMIN
  MANAGER
  OPERATOR
  VIEWER
}

enum company_status {
  INVITED
  ACTIVE
  INACTIVE
}
